% this script tests classification procedures; 
% add procedure below for benchmarking. 
%
% benchmarking saved as classifiers.log
% 
%   Copyright (c) 2009, Marcel van Gerven
%
%   $Log: not supported by cvs2svn $
%

fclose('all');
close all
clear all

%% add required definitions here

% custom pdf and mle for gnb
truncgauss = @(x,mu,sigma)(normpdf(x,mu,sigma)./(normcdf(500,mu,sigma)-normcdf(0,mu,sigma)));
truncmle = @(x)(mle(x,'pdf',truncgauss,...
  'start', [nanmean(x) nanstd(x)], ...
  'lower', [-2 -2]));

% custom pdf for gnb
vonmises = @(x,mu,k)((1/(2*pi*besseli(0,k)))*exp(k*cos(mod(x,2*pi)-mu))); %gives the density at that point


%% specify classifier here

procedures = {
   randomclassifier() ...
   ensemble('procedures',{cproc({lr()}) cproc({nb()})},'combination','majority')  ...
   gnb('conditional','normal')  ...
   nb()  ...
   lr()  ...
   gp()  ...
   nearestneighbour()  ...
   da('disfun','quadratic')  ...
   rfda()  ...
   rlda()  ...
   kernelmethod()  ...
   svmmethod()  ...
   libsvm()  ...
   gslr('maxgroup',100)  ...
   optimizer('validator',crossvalidator('procedure',{kernelmethod()}),'variables','C','values',1:2,'metric','accuracy','verbose',true) ...
  % pnn()  ...
  % rnb('lambas',[100],'tolerance',0,'epsilon',1e-2) ...  
  % mixtureclassifier('mixture',2) ...
  % gnb('conditional',truncgauss,'mle',truncmle) ...
  % gnb('conditional',vonmises,'mle',@mlemises)  ...  
  % gnb('conditional','exponential')  ...
};

desc = { 
  'random classifier' ...
  'ensemble method' ...
  'gnb with normal distribution' ...
  'gaussian naive bayes' ...  
  'logistic regression' ...
  'gaussian process' ...
  'nearest neighbour classifier' ...
  'linear discriminant analysis with quadratic discrimination function' ...
  'regularized fished discriminant analysis' ...
  'regularized linear discriminant analysis' ...
  'kernel method (svm)' ...
  'svm method' ...
  'libsvm wrapper' ...
  'group-sparsifying logistic regression' ...
  'optimizer' 
 % 'probabilistic neural network' ...
};

%% start analysis

% iterate over all specified classification procedures
fid = fopen('classifiers.log','w+');
for c=1:length(procedures)

  fprintf('testing %s\n',desc{c});
  
  tic;
  prc = { preprocessor('prefun',@(x)(log10(x))) standardizer() procedures{c}};
  [acc,p] = test_procedure(prc,0.8);
   
  fprintf(fid,'%f\t%f\t%f\t%s\n',acc,p,toc,desc{c});

end
fclose(fid);
